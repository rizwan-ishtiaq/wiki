docker
  version
  info
  run #run new container
    -d #run in backgroud/detached mood
    --name #name of new container
      <unique name> #show when you ps
    -p #map port
      <host post>:<inside docker port>
    -it #open intractive mood
    <image name> #check in local repo with tag lastest, else download
    <shell name> type of shell you want to intract like bash or cmd
  ps #running containers
    -a #all
    -aq #quite and return all container id
  images #info about images
    --digests #out contains the hash id of image
  pull #download image to local
    <image name> #default get with tag latest
      -a #pull all images in repo that match my plateform and architucture
    <image name>:<tag> #the version of image you want to get
  rmi #remove image from local repo
    <image name>:<tag> or <id>
    $(docker images -q) #remove all images
  start
    <container name> or <container id>
  stop
    <container name> or <container id>
    $(docker ps -aq) #stop all containers
  rm #remove container
    -f #force removal, will remove running containers
     <container name> or <container id>
     $(docker ps -aq) #remove all containers
  port #return the list of ports map
    <container name or id>
  logs
    <container name or id>
      -f #follow logs
  history
    <image name or id> #show commands history while building image
  inspect
    <image name or id> or <container name or id> #return config and layers of image
  build #build image from Dockerfile
    -t <any name> #create tag on image
    <dir path> #build context path, location of source code, can be git repo
    
Inside container sheel
  exit #exit shell and container will stop, because shell was only process running (if you canme into shell with run command)
  ctl+p+q #exit intractive mood and don't stop shell
  
docker swarm
  init #create new cluster
    --advertise-addr <ip address>:<any port> #prod have more than 1 ip, default ip for swarm staff:2377 (best to use)
    --listen-addr <ip address>:<any port> #listen swarm manager traffic:2377
  join-token
    manager #Return command to execute to machine to add in swarm as manager
    worker #Return command to execute to machine to add in swarm as worker
  join #add new node into swarm
    --token <long token>
    --advertise-addr <ip address>:<any port> #of current machine/node
    --listen-addr <ip address>:<any port> #of current machine/node
   
docker node
  ls #only runs on manager and show all nodes
  promote #promote worker node into manager
    <host name> or <id>
  ps #show the running tasks on mentioned node
    <host name> or <id>
    
docker service
  create
    --name <any name>
    --network <name> #particular network where you want to deploy service
    -p <swarm port>:<container port> #map port accross the entire swarm
    --replicas <number> #create <number> tasks and remains active at any time
    <image name>
  ls #list all the services
  ps #running tasks of service
    <service name> or <id>
    self #All the tasks running
  inspect #detail config of service
    --pretty #make it readable
    <service name> or <id>
  update
    --replicas  #increase of decrease the number of task
      <number>
    --image <name> #if you want to update image
    -- update-parallelism #become default or change default
      <number> #<number> task at a time
    --update-delay #become default or change default
      10s #10 sec or use m for mintues, wait for this param
    <service name> or <id>
  scale #same like update --replicas
    <service name> or <id>=<number> #increase of decrease the number of task
  rm #remove the complete service
    <service name> or <id>
    
docker network
  create
    -d
    overlay <any name> #create a network with type overlay
  ls #print all networks
  
Native docker engine port: 2375
Secure docker engine port: 2376
  
Dockerfile
FROM #layer, always 1st line, underlyine OS
LABEL #matadata, anything as label e-g maintainer
RUN #layer, execute command e-g linux command
COPY #layer, copy from local file system to image
WORKDIR #matadata, set working dir inside image
EXPOSE #matadata, expose port from image
ENTRYPOINT[] #matadata, execute application
